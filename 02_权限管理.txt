ls  -l: 显示文件的详细信息
    第一个字符的含义: 文件类型
        -: 普通文件
        d: 目录
        b: 块设备
        c: 字符设备
        l: 符号链接文件
        p: 管道
        s: 套接字
    9 个数字: 文件权限
        三位一组，分别表示文件所有者、组和其他人是否拥有 rwx 权限
        文件:
            r: 可读，可以用命令如 cat 查看文件内容
            w: 可写，可以编辑或者删除该文件
            x: 可执行，eXecutable,
        目录:
            r: 可读，可以用命令如 ls 列出该目录下的文件，如果没有 x 权限，则不能 $ls -l
            w: 可写，可以在该目录下创建文件
            x: 可执行，可以使用 cd 进入该目录，也可以使用 ls -l 查看文件夹下的文件
    文件硬链接的次数
    文件的属主
    文件的属组
    文件大小(默认字节)
    文件的时间戳(最近访问、修改和改变时间)
        atime,
        mtime: content changed, 文件内容修改
        ctime: metadata change, 文件元数据变了
    文件名称

chmod   改变文件或目录的权限模式
    -R: 递归修改目录及子目录和他们包含的所有文件的权限
    --reference=/path/to/file: 按指定文件的权限模型修改
    权限的八进制表示:
        000 ---   001 --x  010 -w-    100 r--    101  r-x   110 rw-     111 rwx
        0         1        2          4          5          6           7
    八进制指定模式
        $sudo chmod 755 /path/to/file
        注意:
            如果给的八进制不是三位的，则在前面用 0 补齐三位，再按此新数字确定权限模型

    用户身份分类:
        u: file owner, 文件所有者
        g: the group owns the file, 文件所属组
        o: other people, 其他人
        a: all user, 所有人

    rxw 指定  - 可以省略
        $sudo chmod u=rxw /path/to/file  ==> g=rw-   go=---  uo=rw  a=rxw  o=
    rwx 增减
        $sudo chmod u-x /path/to/file  ==> g+x   o+r

chown: 改变文件的属主，也可同时更改文件的属组
    $chown -R new_user:new_grp target_file
    $chown -R new_user target_file
    
chgrp: 改变文件的属组


umask
    默认
        root   :   0022
        普通用户: 0002

    文件: 666 - umask     644
    目录: 777 - umask     755

    设置 umask:   $umask  VALUE   (三个或者四个八进制数字)

    注意:
        文件默认不能具有执行权限，如果计算结果使得文件具有了默认执行权限，则创建文件时，权限
        值自动加 1

特殊权限
    SUID, SGID, Sticky
    进程的属组，没有太大的意义
    1. 权限   r   w   x       user    group   other
    2. 安全上下文    进程有属主和属组
            进程的属主是进程的发起者   进程的权限取决于进程发起者的权限

        - 任何一个可执行文件能否启动为进程，取决于发起者是否有执行权限
        - 进程启动后，进程的属主为进程的发起者，进程的属组为发起者发起时所在的组
        - 进程访问文件时所拥有的权限，取决于进程的发起者
            - 发起者是文件的属主，则拥有属主权限
            - 发起者在文件的属组内，则拥有属组权限
            - 否则，进程拥有应用文件的其他权限

    3. SUID 位
        可执行文件设定 SUID 后，进程发起后，进程的属主不是发起者
        - 任何一个可执行文件能否启动为进程，取决于发起者是否有执行权限
        - 进程启动后，进程的属主不是发起者，而是可执行文件的属主
        例子
            /etc/passwd 文件: 000 权限，但每个用户都可改自己的密码
            /usr/bin/passwd  rwsr-xr-x  root root

        设定该权限
            chmod u+s file...
            chmod u-s file...

    4. SGID 位
        默认，用户创建文件时，该文件属组是创建者所在的基本组
        一旦目录设定了 SGID，对此目录有写权限的用户，在该目录下创建的文件的属组，不再是该用户
        的基本组，而是该目录的属组

        设定目录的 SGID
            chmod g+s DIR
            chmod g-s DIR
    5. Sticky位
        对于一个多人可写的目录，如果设置了 sticky, 则每个人只能删除自己的文件，不能删除其他人
        文件
            chmod o+t DIR
            chmod o-t DIR
        例子
            /tmp
            /var/tmp

        SUID SGID STICKY    ==> s s t
         0     0    0 - 1  1  1 ==> 7
            chmod 1777 /tmp/a.txt       2777    3777
    关于几个执行权限位
        SUID: user 占据属主的执行权限位
            s: 表示属主本来拥有 x 权限
            S: 表示属主没有 x 权限
        SGID: group, 占据 group 的执行权限位
            s: group拥有 x 权限
            S: group没有 x 权限
        Sticky: other, 占据other的执行权限位
            t: other 拥有 x 权限
            T: other 没有 x 权限
